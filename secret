#!/usr/bin/env bash

RED='\033[0;31m'
NC='\033[0m' # No Color

version(){
  echo "v1.1.0"
}

validate(){
  # Validate running on macos
  if [[ "$OSTYPE" != "darwin"* ]]; then
    echo -e "{$RED}This script is only for macOS{$NC}"
    exit 1
  fi

  # validate yq is installed
  if ! command -v yq &> /dev/null
  then
      echo "yq could not be found, installing with homebrew"
      brew install yq
  fi

  # validate jq is installed
  if ! command -v jq &> /dev/null
  then
      echo "jq could not be found, installing with homebrew"
      brew install jq
  fi

  # validate kubectl is installed
  if ! command -v kubectl &> /dev/null
  then
      echo "kubectl could not be found, installing with homebrew"
      brew install kubectl
  fi
}

usage(){
  # Print usage
  echo "Usage: kubectl [get, edit, create] secret [options]"
  echo "       kubectl get secret SECRET_NAME [options]"
  echo "       kubectl edit secret SECRET_NAME [options]"
  echo "       kubectl create secret SECRET_NAME [options]"
  echo ""
  echo "Options:"
  echo "  -h, --help            Display this help message"
  echo "  -n, --namespace       Namespace to use"
  echo "  -j, --json            Output as json"
  echo "  --no-easy-k8s-secrets  Bypass easy k8s secrets and use kubectl directly"

  if [[ -n "$USAGE_EXIT_CODE" ]]; then
    exit $USAGE_EXIT_CODE
  fi
  exit
}

parse_opt() {
  while [[ $# -gt 0 ]]; do
    case $1 in
      -h|--help)
        usage
        ;;
      -n|--namespace)
        NS_FLAG="-n $2"
        shift
        shift
        ;;
      -j|--json)
        AS_JSON=1
        shift
        ;;
      -v|--version)
        version
        exit
        ;;
      -*|--*)
        echo -e "${RED}Unknown option $1${NC}"
        echo ""
        USAGE_EXIT_CODE=1
        usage
        ;;
      *)
        if [[ "$1" != "secret" ]]; then
          POSITIONAL_ARGS+=("$1") # save positional arg
        fi
        shift # past argument
        ;;
    esac
  done
}

subcommand_parse(){
  # Parse subcommand
  if [[ $1 == "" ]]; then
    usage
  fi

  case $1 in
    get)
      shift
      get_secret "$@"
      ;;
    edit)
      shift
      edit_secret "$@"
      ;;
    create)
      shift
      create_secret "$@"
      ;;
    *)
      echo -e "${RED}Unknown subcommand: $1${NC}"
      echo ""
      USAGE_EXIT_CODE=1
      usage
      ;;
  esac
}

get_secret(){

  if [[ "$1" == "" ]]; then
    echo -e "${RED}Secret name is required${NC}"
    echo ""
    USAGE_EXIT_CODE=1
    usage
  fi

  original_secret_value=$(kubectl get secret $NS_FLAG $1 -o json)
  secret_data_decoded=$(echo $original_secret_value | jq '.data | map_values(@base64d)')
  decoded_secret=$(echo $original_secret_value | jq ".data = $secret_data_decoded")

  if [[ -n "$AS_JSON" ]]; then
    echo $decoded_secret | jq -r
  else
    echo $decoded_secret | yq e -P
  fi
}

edit_secret(){
  # Only allow editing in yaml
  unset AS_JSON

  if [[ "$1" == "" ]]; then
    echo -e "${RED}Secret name is required${NC}"
    echo ""
    USAGE_EXIT_CODE=1
    usage
  fi

  tmpfile=$(mktemp /tmp/k8s-secret-edit.XXXXXX)
  get_secret $1 >> $tmpfile

  # Open with EDITOR if set, otherwise use vim
  ${EDITOR:-vim} $tmpfile

  # Turn yaml into json, replace the values with encoded values and apply to kubernetes
  json_output=$(cat $tmpfile | yq e -P -o=json)
  encoded_values=$(echo $json_output | jq '.data | map_values(@base64)')
  echo $json_output | jq ".data = $encoded_values" | yq e -P | kubectl $NS_FLAG apply -f -

  rm $tmpfile
}

create_secret(){
  # Only allow editing in yaml
  unset AS_JSON

  if [[ "$1" == "" ]]; then
    echo -e "${RED}Secret name is required${NC}"
    echo ""
    USAGE_EXIT_CODE=1
    usage
  fi

  tmpfile=$(mktemp /tmp/k8s-secret-create.XXXXXX)
  echo "apiVersion: v1
kind: Secret
metadata:
  name: $1
type: Opaque
data:
   " >> $tmpfile

  # Open with EDITOR if set, otherwise use vim
  ${EDITOR:-vim} $tmpfile

  # Turn yaml into json, replace the values with encoded values and apply to kubernetes
  json_output=$(cat $tmpfile | yq e -P -o=json)
  encoded_values=$(echo $json_output | jq '.data | map_values(@base64)')
  echo $json_output | jq ".data = $encoded_values" | yq e -P | kubectl $NS_FLAG apply -f -

  rm $tmpfile
}

validate
parse_opt "$@"
subcommand_parse "${POSITIONAL_ARGS[@]}"
